/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
int timer1_flag = 0,timer1 = 0;
int timer2_flag = 0,timer2 = 0;
uint8_t matrix_buffer[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
void setTimer1(int duration){
	timer1_flag = 0;
	timer1 = duration;
}
void setTimer2(int duration){
	timer2_flag = 0;
	timer2 = duration;
}
void timer1Run(){
	if(timer1>0){
		timer1--;
	}
	else timer1_flag = 1;
}
void timer2Run(){
	if(timer2>0) timer2--;
	else timer2_flag = 1;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	timer1Run();
	timer2Run();
}
void setUpLEDMatrix();
void updateLEDMatrix(int index){
	setUpLEDMatrix();
	switch (index){
		case 0:
			//DISPLAY matrix_buffer[0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,RESET);
			if((matrix_buffer[0] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[0] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[0] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[0] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[0] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[0] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[0] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[0] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 1:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,RESET);
			if((matrix_buffer[1] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[1] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[1] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[1] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[1] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[1] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[1] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[1] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,RESET);
			if((matrix_buffer[2] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[2] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[2] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[2] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[2] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[2] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[2] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[2] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 3:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,RESET);
			if((matrix_buffer[3] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[3] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[3] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[3] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[3] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[3] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[3] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[3] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 4:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,RESET);
			if((matrix_buffer[4] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[4] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[4] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[4] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[4] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[4] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[4] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[4] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 5:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,RESET);
			if((matrix_buffer[5] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[5] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[5] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[5] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[5] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[5] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[5] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[5] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 6:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_14,RESET);
			if((matrix_buffer[6] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[6] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[6] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[6] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[6] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[6] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[6] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[6] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 7:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
			if((matrix_buffer[7] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[7] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[7] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[7] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[7] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[7] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[7] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[7] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		default:
			break;
	}
}
void setUpLEDMatrix(){ // turn off all led in led matrix
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_14,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,SET);
}
void updateLEDMatrixBuffer(int num){
	switch(num){
	case 0:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x7E;
		matrix_buffer[2] = 0x81;
		matrix_buffer[3] = 0x81;
		matrix_buffer[4] = 0x81;
		matrix_buffer[5] = 0x81;
		matrix_buffer[6] = 0x7E;
		matrix_buffer[7] = 0x00;
		break;
	case 1:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x00;
		matrix_buffer[2] = 0x84;
		matrix_buffer[3] = 0xFE;
		matrix_buffer[4] = 0x80;
		matrix_buffer[5] = 0x00;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 2:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x84;
		matrix_buffer[2] = 0xC2;
		matrix_buffer[3] = 0xA2;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x8C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 3:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x42;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x9A;
		matrix_buffer[4] = 0x96;
		matrix_buffer[5] = 0x62;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 4:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x30;
		matrix_buffer[2] = 0x28;
		matrix_buffer[3] = 0x24;
		matrix_buffer[4] = 0xFE;
		matrix_buffer[5] = 0x20;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 5:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x5E;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x62;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 6:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x7C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x64;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 7:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x02;
		matrix_buffer[2] = 0x02;
		matrix_buffer[3] = 0xF2;
		matrix_buffer[4] = 0x0A;
		matrix_buffer[5] = 0x06;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 8:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x6C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x6C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 9:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x4C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x7C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	}
}
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  setUpLEDMatrix();
  HAL_TIM_Base_Start_IT(&htim2);
  setTimer1(1);
  setTimer2(1);
  int index = 0;
  int num = 0;
  /* USER CODE END 2 */
  updateLEDMatrixBuffer(num++);
  num++;
  while (1)
  {
    /* USER CODE END WHILE */
	/*The code below displays number "1" in LED MATRIX with time scanning 500ms*/
	if(timer1_flag == 1){
		updateLEDMatrix(index);
		index++;
		index%=8;
		setTimer1(125);
	}
	if(timer2_flag == 1){
		updateLEDMatrixBuffer(num++);
		num%=10;
		setTimer2(1000);
	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 799;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
