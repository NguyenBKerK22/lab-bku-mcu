TIM_HandleTypeDef htim2;
int timer1 = 0, timer2 = 0;
int timer1_flag = 0, timer2_flag = 0;
int status = 1;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
int hour = 15, minute = 8, second = 50;
const int MAX_LED = 4;
void setTimer1(int duration){
	timer1 = duration;
	timer1_flag = 0;
}
void setTimer2(int duration){
	timer2 = duration;
	timer2_flag  = 0;
}
void timer1Run(){
	if(timer1>0) timer1--;
	else if(timer1<=0) timer1_flag = 1;
}
void timer2Run(){
	if(timer2>0) timer2--;
	else if(timer2<=0) timer2_flag = 1;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	timer1Run();
	timer2Run();
}
void display7SEG(int count){
	switch(count){
	case 0:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET); //g
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET); //f
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);//e
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);//d
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET); //c
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET); //b
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET); //a
			break;
	case 1:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET);
			break;
	case 2:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 3:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 4:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 5:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 6:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET);
			break;
	case 8:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 9:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	}
}

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
void update7SEG(int index){
 switch (index){
 case 0:
 //Display the first 7SEG with led_buffer[0]
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,SET);
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,RESET);
	 display7SEG(led_buffer[0]);
 break;
 case 1:
 //Display the second 7SEG with led_buffer[1]
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,SET);
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,RESET);
	 display7SEG(led_buffer[1]);
 break;
 case 2:
 //Display the third 7SEG with led_buffer[2]
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,SET);
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,RESET);
	 display7SEG(led_buffer[2]);
 break;
 case 3:
 //Display the forth 7SEG with led_buffer[3]
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,SET);
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,RESET);
	 display7SEG(led_buffer[3]);
 break;
 default:
 break;
 }
 }
void updateClockBuffer(){
	led_buffer[0] = hour/10;
	led_buffer[1] = hour%10;
	led_buffer[2] = minute/10;
	led_buffer[3] = minute%10;
}
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer1(100);
//  setTimer2(50);
//  HAL_TIM_Base_Start_IT(&htim2);

  int index = 3;
  HAL_TIM_Base_Start_IT(&htim2);
  setTimer1(31);
  setTimer2(20);
  while(1){
	  if(timer1_flag == 1){
		  second++;
		  if (second >= 60){
			  second = 0;
			  minute++;
		  }
		  if(minute >= 60){
			  minute = 0;
			  hour++;
		  }
		  if(hour >=24){
			  hour = 0;
		  }
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
		  updateClockBuffer();
		  setTimer1(1000);
	  }
	  if(timer2_flag==1){
		  update7SEG(index++);
		  if(index>=4) index = 0;
		  setTimer2(500);
	  }
  }
  /* USER CODE END 3 */
}
