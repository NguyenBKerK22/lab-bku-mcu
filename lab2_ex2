TIM_HandleTypeDef htim2;
int timer1 = 0, timer2 = 0;
int timer1_flag = 0, timer2_flag = 0;
int hour = 0, minute = 0;
int status = 1;
void setTimer1(int duration){
	timer1 = duration;
}
void setTimer2(int duration){
	timer2 = duration;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	timer1--;
	timer2--;
	if(timer1==0) timer1_flag = 1;
	if(timer2==0) timer2_flag =1;
}
void display7SEG(int count){
	switch(count){
	case 0:
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET); //g
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET); //f
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);//e
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);//d
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET); //c
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET); //b
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET); //a
			break;
	case 1:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET);
			break;
	case 2:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 3:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 4:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 5:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 6:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
		break;
	case 7:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,SET);
			break;
	case 8:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	case 9:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,RESET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);
			break;
	}
}

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer1(100);
//  setTimer2(50);
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,RESET);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,RESET);
  setTimer1(101);
  setTimer2(20);
  HAL_TIM_Base_Start_IT(&htim2);
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */
		  	  if(timer1_flag == 1){ // +1s
		  		setTimer1(100);
		  		  minute++;
		  		  if(minute == 60){
		  			  minute = 0;
		  			  hour++;
		  			  if(hour == 24){
		  				  hour = 0;
		  			  }
		  		  }
		  		  timer1_flag = 0;
		  	  }
		  	  if(timer2_flag == 1){ // +0.5s
		  		setTimer2(20);
		  		  switch(status){
		  		  case 0:
		  			  // Display LED 1
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,SET);
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,RESET);
		  			  display7SEG(hour/10);
		  			  break;
		  		  case 1:
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,SET);
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,RESET);
		  			  display7SEG(hour%10);
		  			  break;
		  		  case 2:
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,SET);
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,RESET);
		  			  display7SEG(minute/10);
		  			  break;
		  		  case 3:
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,SET);
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,RESET);
		  			  display7SEG(minute%10);
		  			  break;
		  		  default:
		  			  break;
		  		  }
		  		  status++;
		  		  status%=4;
		  		  timer2_flag = 0;
		  	  }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
