const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
int timer1_flag = 0,timer1 = 0;
int timer2_flag = 0,timer2 = 0;
uint8_t matrix_buffer[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
void setTimer1(int duration){
	timer1_flag = 0;
	timer1 = duration;
}
void setTimer2(int duration){
	timer2_flag = 0;
	timer2 = duration;
}
void timer1Run(){
	if(timer1>0){
		timer1--;
	}
	else timer1_flag = 1;
}
void timer2Run(){
	if(timer2>0) timer2--;
	else timer2_flag = 1;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	timer1Run();
	timer2Run();
}
void setUpLEDMatrix();
void updateLEDMatrix(int index){
	setUpLEDMatrix();
	switch (index){
		case 0:
			//DISPLAY matrix_buffer[0]
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,RESET);
			if((matrix_buffer[0] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[0] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[0] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[0] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[0] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[0] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[0] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[0] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 1:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,RESET);
			if((matrix_buffer[1] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[1] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[1] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[1] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[1] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[1] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[1] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[1] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,RESET);
			if((matrix_buffer[2] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[2] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[2] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[2] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[2] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[2] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[2] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[2] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 3:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,RESET);
			if((matrix_buffer[3] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[3] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[3] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[3] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[3] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[3] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[3] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[3] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 4:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,RESET);
			if((matrix_buffer[4] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[4] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[4] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[4] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[4] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[4] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[4] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[4] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 5:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,RESET);
			if((matrix_buffer[5] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[5] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[5] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[5] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[5] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[5] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[5] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[5] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 6:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_14,RESET);
			if((matrix_buffer[6] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[6] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[6] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[6] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[6] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[6] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[6] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[6] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		case 7:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
			if((matrix_buffer[7] & 0x01) == 0x01){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,RESET);
			}
			if((matrix_buffer[7] & 0x02) == 0x02){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,RESET);
			}
			if((matrix_buffer[7] & 0x04) == 0x04){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,RESET);
			}
			if((matrix_buffer[7] & 0x08) == 0x08){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,RESET);
			}
			if((matrix_buffer[7] & 0x10) == 0x10){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);
			}
			if((matrix_buffer[7] & 0x20) == 0x20){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);
			}
			if((matrix_buffer[7] & 0x40) == 0x40){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,RESET);
			}
			if((matrix_buffer[7] & 0x80) == 0x80){
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,RESET);
			}
			break;
		default:
			break;
	}
}
void setUpLEDMatrix(){ // turn off all led in led matrix
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_13,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_14,SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,SET);
}
void updateLEDMatrixBuffer(int num){
	switch(num){
	case 0:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x7E;
		matrix_buffer[2] = 0x81;
		matrix_buffer[3] = 0x81;
		matrix_buffer[4] = 0x81;
		matrix_buffer[5] = 0x81;
		matrix_buffer[6] = 0x7E;
		matrix_buffer[7] = 0x00;
		break;
	case 1:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x00;
		matrix_buffer[2] = 0x84;
		matrix_buffer[3] = 0xFE;
		matrix_buffer[4] = 0x80;
		matrix_buffer[5] = 0x00;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 2:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x84;
		matrix_buffer[2] = 0xC2;
		matrix_buffer[3] = 0xA2;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x8C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 3:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x42;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x9A;
		matrix_buffer[4] = 0x96;
		matrix_buffer[5] = 0x62;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 4:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x30;
		matrix_buffer[2] = 0x28;
		matrix_buffer[3] = 0x24;
		matrix_buffer[4] = 0xFE;
		matrix_buffer[5] = 0x20;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 5:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x5E;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x62;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 6:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x7C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x64;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 7:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x02;
		matrix_buffer[2] = 0x02;
		matrix_buffer[3] = 0xF2;
		matrix_buffer[4] = 0x0A;
		matrix_buffer[5] = 0x06;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 8:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x6C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x6C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	case 9:
		matrix_buffer[0] = 0x00;
		matrix_buffer[1] = 0x4C;
		matrix_buffer[2] = 0x92;
		matrix_buffer[3] = 0x92;
		matrix_buffer[4] = 0x92;
		matrix_buffer[5] = 0x7C;
		matrix_buffer[6] = 0x00;
		matrix_buffer[7] = 0x00;
		break;
	}
}
